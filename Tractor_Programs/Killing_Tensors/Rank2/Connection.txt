HauserTractorConnection:=proc(Gamma, curvatureTensor:="") local T, Bv, Bf, CT, dimbase, Fv, ktb, KA, ltb, Ltb, LA, mtb, Mtb, MA, numK, numL, numM, K1, K2, L1, L2, M1, M2, Comps, Comps2, Comps3, Comps4, realK, realL, realM, KR, Lc1, dR, KdR, RL2, RL3, Mc1, Eqns, Kc1a, Kc2, Kc3, Lc1a, Lc2, Lc3, Lc4, Lc5, Lc6, Lc7, Lc8, Lc9, Lc10, Mc1a, Mc2, Mc3, Mc4, Mc5, Mc6, Mc7, Mc8, Mc9, Mc10, Mc11, Mc12, Mc13, Mc14, Mc15, Mc16, Mc17, Mc18, Mc19, Mc20, Mc21, Mc22, Mc23, Mc24, Mc25, Mc26, Mc27, Mc28, Mc29, Mc30, Mc31, Mc32, Mc33, Mc34, Mc35, Mc36, Mc37, Mc38, Mc39, Mc40, Mc41, Mc42, Mc43, Mc44, Mc45, Mc46, Mc47, Mc48, Mc49, Mc50, Mc51, Mc52, Mc53, Mc54, Mc55, Kc1, Kc1b, Kc1c, Lc1b, Lc1c, Mc1b, Mc1c, m, BigMat;

T:=DGinformation(Gamma, "ObjectFrame"); #this should be the vector bundle.

Bv:=DGinformation(T,"FrameBaseVectors");
Bf:=DGinformation(T,"FrameBaseForms");

#CT:=CurvatureTensor(Gamma); # the curvatureTensor is an optional argument in case it is difficult to compute.
if DGinformation(curvatureTensor, "ObjectType")="tensor" then CT:=curvatureTensor else CT:=CurvatureTensor(Gamma) fi;

dimbase:=nops(Bv);
Fv:=DGinformation(T,"FrameFiberVectors");

#Here we get the independent components list for each tensor.

ktb:=YoungTableauBasis([2],dimbase,output="Matrix");
KA:=[seq([ktb[i][1][1],ktb[i][1][2]],i=1..nops(ktb))];
ltb:=YoungTableauBasis([2,1],dimbase,output="Matrix");
Ltb:=map(LinearAlgebra:-Transpose,ltb);
LA:=[seq([Ltb[i][1][1],Ltb[i][1][2],Ltb[i][2][1]],i=1..nops(Ltb))];
mtb:=YoungTableauBasis([2,2],dimbase,output="Matrix");
Mtb:=map(LinearAlgebra:-Transpose,mtb);
MA:=[seq([Mtb[i][1][1],Mtb[i][1][2],Mtb[i][2][1],Mtb[i][2][2]],i=1..nops(Mtb))];

numK:=nops(KA);
numL:=nops(LA);
numM:=nops(MA);

K1:=_DG([["tensor", T, [["cov_bas", "cov_bas"], []]], [seq([KA[i],z||i],i=1..numK)]]);
K2:=YoungSymmetrizer(K1,Matrix([[1,2]]));

L1:=_DG([["tensor", T, [["cov_bas", "cov_bas","cov_bas"], []]], [seq([LA[i-numK],z||i],i=1+numK..numK+numL)]]);
L2:=YoungSymmetrizer(L1,Matrix([[1,3],[2]]));

M1:=_DG([["tensor", T, [["cov_bas", "cov_bas","cov_bas","cov_bas"], []]], [seq([MA[i-numL-numK],z||i],i=1+numK+numL..numK+numL+numM)]]);
M2:=YoungSymmetrizer(M1,Matrix([[1,3],[2,4]]));

Comps:=ListTools:-FlattenOnce([[seq(DGinformation(K2,"CoefficientList",[a])[1],a=KA)],[seq(DGinformation(L2,"CoefficientList",[a])[1],a=LA)],[seq(DGinformation(M2,"CoefficientList",[a])[1],a=MA)]]);

Comps2:=[seq(y||i,i=1..nops(Comps))];
Comps3:=[seq(Comps[i] = Comps2[i], i=1..nops(Comps))];
Comps4:=solve(Comps3,{seq(z||i,i=1..nops(Comps))});

realK:=evalDG(simplify(subs(Comps4,K2)));
realL:=evalDG(simplify(subs(Comps4,L2)));
realM:=evalDG(simplify(subs(Comps4,M2)));

#Having constructed K, L, and M, we give the first structure equation.

KR:=ContractIndices( realK,CT,[[2,1]]):
dR:=CovariantDerivative(CT,Gamma);
KdR:=ContractIndices(realK,dR,[[2,1]]);
RL2:=ContractIndices(CT,realL,[[1,2]]);
RL3:=ContractIndices(CT,realL,[[1,3]]);

for m in seq(i,i=1..dimbase) do
Kc1b:=DirectionalCovariantDerivative(Bv[m],realK,Gamma);
Kc1c:=[seq( DGinformation(Kc1b,"CoefficientList",[[a[1],a[2]]])[1],a=KA)];
Kc2:=[seq(DGinformation(evalDG(1/3*realL),"CoefficientList",[[m,a[1],a[2]]])[1], a=KA)];
Kc3:=[seq(DGinformation(evalDG(1/3*realL),"CoefficientList",[[m,a[2],a[1]]])[1], a=KA)];
Kc1:=[seq(Kc2[i]+Kc3[i] + Kc1c[i],i=1..nops(Kc1c))];
#was the last sign a minus??

#End of first structure equation.

#The next Structure equation is as follows. First, we give all of the terms.

Lc1b:=DirectionalCovariantDerivative(Bv[m],realL,Gamma);
Lc1c:=[seq( DGinformation(Lc1b,"CoefficientList",[[a[1],a[2],a[3]]])[1],a=LA)];
Lc2:=[seq(DGinformation(evalDG(5/4*KR),"CoefficientList",[[a[3],m,a[1],a[2]]])[1], a=LA)];
Lc3:=[seq(DGinformation(evalDG(3/4*KR),"CoefficientList",[[m,a[3],a[1],a[2]]])[1], a=LA)];
Lc4:=[seq(DGinformation(evalDG(1/2*KR),"CoefficientList",[[a[1],m,a[3],a[2]]])[1], a=LA)];
Lc5:=[seq(DGinformation(evalDG(-1/2*KR),"CoefficientList",[[a[2],m,a[3],a[1]]])[1], a=LA)];
Lc6:=[seq(DGinformation(evalDG(1/2*KR),"CoefficientList",[[a[1],a[3],m,a[2]]])[1], a=LA)];
Lc7:=[seq(DGinformation(evalDG(-1/2*KR),"CoefficientList",[[a[2],a[3],m,a[1]]])[1], a=LA)];
Lc8:=[seq(DGinformation(evalDG(1/4*KR),"CoefficientList",[[a[2],a[1],a[3],m]])[1], a=LA)];
Lc9:=[seq(DGinformation(evalDG(-1/4*KR),"CoefficientList",[[a[1],a[2],a[3],m]])[1], a=LA)];
Lc10:=[seq(DGinformation(realM,"CoefficientList",[[a[1],a[2],a[3],m]])[1], a=LA)];

#Now we "zip" the terms together.

Lc1:=[seq(Lc2[i] + Lc3[i] + Lc4[i] + Lc5[i] + Lc6[i] + Lc7[i] + Lc8[i] + Lc9[i] + Lc10[i] + Lc1c[i],i=1..nops(Lc1c))];

#Having constructed the second structure equation, we construct the last.

#Now we give each term separately, as before.

#"easy" part:
Mc1b:=DirectionalCovariantDerivative(Bv[m],realM,Gamma);
Mc1c:=[seq( DGinformation(Mc1b,"CoefficientList",[[a[1],a[2],a[3],a[4]]])[1],a=MA)];

#KdR terms:
Mc2:=[seq(DGinformation(evalDG((-1)*KdR),"CoefficientList",[[ m,a[3],a[1],a[2],a[4] ]])[1], a=MA)];
Mc3:=[seq(DGinformation(evalDG((-1)*KdR),"CoefficientList",[[ m,a[4],a[2],a[1],a[3] ]])[1], a=MA)];
Mc4:=[seq(DGinformation(evalDG((-1)*KdR),"CoefficientList",[[ a[4],m,a[2],a[1],a[3] ]])[1], a=MA)];
Mc5:=[seq(DGinformation(evalDG(-(-1)*KdR),"CoefficientList",[[ a[3],m,a[2],a[1],a[4] ]])[1], a=MA)];
#End of line 1
Mc6:=[seq(DGinformation(evalDG(1/2*(-1)*KdR),"CoefficientList",[[ a[1],a[3],m,a[2],a[4] ]])[1], a=MA)];
Mc7:=[seq(DGinformation(evalDG(1/2*(-1)*KdR),"CoefficientList",[[ a[1],a[4],a[2],m,a[3] ]])[1], a=MA)];
Mc8:=[seq(DGinformation(evalDG(1/2*(-1)*KdR),"CoefficientList",[[ a[2],a[3],a[1],m,a[4] ]])[1], a=MA)];
Mc9:=[seq(DGinformation(evalDG(1/2*(-1)*KdR),"CoefficientList",[[ a[2],a[4],m,a[1],a[3] ]])[1], a=MA)];
Mc10:=[seq(DGinformation(evalDG(1/2*(-1)*KdR),"CoefficientList",[[ a[2],m,a[4],a[3],a[1] ]])[1], a=MA)];
#End of line 2
Mc11:=[seq(DGinformation(evalDG(-1/2*(-1)*KdR),"CoefficientList",[[ a[1],m,a[4],a[3],a[2] ]])[1], a=MA)];
Mc12:=[seq(DGinformation(evalDG(1/4*(-1)*KdR),"CoefficientList",[[ a[2],a[1],a[4],a[3],m ]])[1], a=MA)];
Mc13:=[seq(DGinformation(evalDG(-1/4*(-1)*KdR),"CoefficientList",[[ a[1],a[2],a[4],a[3],m ]])[1], a=MA)];
Mc14:=[seq(DGinformation(evalDG(1/4*(-1)*KdR),"CoefficientList",[[ a[3],a[4],a[2],a[1],m ]])[1], a=MA)];
Mc15:=[seq(DGinformation(evalDG(-1/4*(-1)*KdR),"CoefficientList",[[ a[4],a[3],a[2],a[1],m ]])[1], a=MA)];
#End of line 3: end of KdR terms.

#Beginning of RL2 terms.
Mc16:=[seq(DGinformation(evalDG(1/2*RL2),"CoefficientList",[[ a[1],a[3],m,a[2],a[4] ]])[1], a=MA)];
Mc17:=[seq(DGinformation(evalDG(-1/2*RL2),"CoefficientList",[[ a[1],a[4],m,a[2],a[3] ]])[1], a=MA)];
Mc18:=[seq(DGinformation(evalDG(-1/2*RL2),"CoefficientList",[[ a[2],a[3],m,a[1],a[4] ]])[1], a=MA)];
Mc19:=[seq(DGinformation(evalDG(1/2*RL2),"CoefficientList",[[ a[2],a[4],m,a[1],a[3] ]])[1], a=MA)];
Mc20:=[seq(DGinformation(evalDG(-1/2*RL2),"CoefficientList",[[ a[1],a[4],a[3],a[2],m ]])[1], a=MA)];
Mc21:=[seq(DGinformation(evalDG(1/2*RL2),"CoefficientList",[[ a[2],a[4],a[3],a[1],m ]])[1], a=MA)];
#End of line 4

Mc22:=[seq(DGinformation(evalDG(-1/3*RL2),"CoefficientList",[[ a[3],a[2],a[1],a[4],m ]])[1], a=MA)];
Mc23:=[seq(DGinformation(evalDG(1/3*RL2),"CoefficientList",[[ a[4],a[2],a[1],a[3],m ]])[1], a=MA)];

#Mc22:=[seq(DGinformation(evalDG(-1/6*RL2),"CoefficientList",[[ a[1],a[2],a[3],a[4],m ]])[1], a=MA)];
#Mc23:=[seq(DGinformation(evalDG(1/6*RL2),"CoefficientList",[[ a[1],a[2],a[4],a[3],m ]])[1], a=MA)];
#Mc24:=[seq(DGinformation(evalDG(1/6*RL2),"CoefficientList",[[ a[2],a[1],a[3],a[4],m ]])[1], a=MA)];
#Mc25:=[seq(DGinformation(evalDG(-1/6*RL2),"CoefficientList",[[ a[2],a[1],a[4],a[3],m ]])[1], a=MA)];

#End of line 5
Mc26:=[seq(DGinformation(evalDG(-1/6*RL2),"CoefficientList",[[ a[3],m,a[1],a[4],a[2] ]])[1], a=MA)];
Mc27:=[seq(DGinformation(evalDG(-1/6*RL2),"CoefficientList",[[ m,a[3],a[1],a[4],a[2] ]])[1], a=MA)];
Mc28:=[seq(DGinformation(evalDG(1/6*RL2),"CoefficientList",[[ a[4],m,a[1],a[3],a[2] ]])[1], a=MA)];
Mc29:=[seq(DGinformation(evalDG(1/6*RL2),"CoefficientList",[[ m,a[4],a[1],a[3],a[2] ]])[1], a=MA)];
#End of line 6
Mc30:=[seq(DGinformation(evalDG(1/6*RL2),"CoefficientList",[[ a[3],m,a[2],a[4],a[1] ]])[1], a=MA)];
Mc31:=[seq(DGinformation(evalDG(1/6*RL2),"CoefficientList",[[ m,a[3],a[2],a[4],a[1] ]])[1], a=MA)];
Mc32:=[seq(DGinformation(evalDG(-1/6*RL2),"CoefficientList",[[ a[4],m,a[2],a[3],a[1] ]])[1], a=MA)];
Mc33:=[seq(DGinformation(evalDG(-1/6*RL2),"CoefficientList",[[ m,a[4],a[2],a[3],a[1] ]])[1], a=MA)];
#End of line 7
Mc34:=[seq(DGinformation(evalDG(1/12*RL2),"CoefficientList",[[ a[1],a[4],a[3],m,a[2] ]])[1], a=MA)];
Mc35:=[seq(DGinformation(evalDG(-1/12*RL2),"CoefficientList",[[ a[2],a[4],a[3],m,a[1] ]])[1], a=MA)];
Mc36:=[seq(DGinformation(evalDG(-1/12*RL2),"CoefficientList",[[ a[3],a[2],a[1],m,a[4] ]])[1], a=MA)];
Mc37:=[seq(DGinformation(evalDG(1/12*RL2),"CoefficientList",[[ a[4],a[2],a[1],m,a[3] ]])[1], a=MA)];
#End of line 8 and end of RL2 terms.

#Beginning of RL3 terms.

Mc38:=[seq(DGinformation(evalDG(-1/3*RL3),"CoefficientList",[[ a[3],a[2],a[1],a[4],m ]])[1], a=MA)];
Mc39:=[seq(DGinformation(evalDG(1/3*RL3),"CoefficientList",[[ a[4],a[2],a[1],a[3],m ]])[1], a=MA)];

#Mc38:=[seq(DGinformation(evalDG(-1/6*RL3),"CoefficientList",[[ a[1],a[2],a[3],a[4],m ]])[1], a=MA)];
#Mc39:=[seq(DGinformation(evalDG(1/6*RL3),"CoefficientList",[[ a[1],a[2],a[4],a[3],m ]])[1], a=MA)];
#Mc40:=[seq(DGinformation(evalDG(1/6*RL3),"CoefficientList",[[ a[2],a[1],a[3],a[4],m ]])[1], a=MA)];
#Mc41:=[seq(DGinformation(evalDG(-1/6*RL3),"CoefficientList",[[ a[2],a[1],a[4],a[3],m ]])[1], a=MA)];

#End of line 9
Mc42:=[seq(DGinformation(evalDG(-1/6*RL3),"CoefficientList",[[ a[3],m,a[1],a[4],a[2] ]])[1], a=MA)];
Mc43:=[seq(DGinformation(evalDG(-1/6*RL3),"CoefficientList",[[ m,a[3],a[1],a[4],a[2] ]])[1], a=MA)];
Mc44:=[seq(DGinformation(evalDG(1/6*RL3),"CoefficientList",[[ a[4],m,a[1],a[3],a[2] ]])[1], a=MA)];
Mc45:=[seq(DGinformation(evalDG(1/6*RL3),"CoefficientList",[[ m,a[4],a[1],a[3],a[2] ]])[1], a=MA)];
#End of line 10
Mc46:=[seq(DGinformation(evalDG(1/6*RL3),"CoefficientList",[[ a[3],m,a[2],a[4],a[1] ]])[1], a=MA)];
Mc47:=[seq(DGinformation(evalDG(1/6*RL3),"CoefficientList",[[ m,a[3],a[2],a[4],a[1] ]])[1], a=MA)];
Mc48:=[seq(DGinformation(evalDG(-1/6*RL3),"CoefficientList",[[ a[4],m,a[2],a[3],a[1] ]])[1], a=MA)];
Mc49:=[seq(DGinformation(evalDG(-1/6*RL3),"CoefficientList",[[ m,a[4],a[2],a[3],a[1] ]])[1], a=MA)];
#End of line 11
Mc50:=[seq(DGinformation(evalDG(1/12*RL3),"CoefficientList",[[ a[1],a[4],a[3],m,a[2] ]])[1], a=MA)];
Mc51:=[seq(DGinformation(evalDG(-1/12*RL3),"CoefficientList",[[ a[2],a[4],a[3],m,a[1] ]])[1], a=MA)];
Mc52:=[seq(DGinformation(evalDG(-1/12*RL3),"CoefficientList",[[ a[3],a[2],a[1],m,a[4] ]])[1], a=MA)];
Mc53:=[seq(DGinformation(evalDG(1/12*RL3),"CoefficientList",[[ a[4],a[2],a[1],m,a[3] ]])[1], a=MA)];
Mc54:=[seq(DGinformation(RL3,"CoefficientList",[[ m,a[4],a[3],a[1],a[2] ]])[1], a=MA)];
Mc55:=[seq(DGinformation(RL3,"CoefficientList",[[ m,a[2],a[1],a[3],a[4] ]])[1], a=MA)];
#End of line 12
#End of terms.

#Mc1:=[seq(Mc2[i] + Mc3[i] + Mc4[i] + Mc5[i] + Mc6[i] + Mc7[i] + Mc8[i] + Mc9[i] + Mc10[i] + Mc11[i] + Mc12[i] + Mc13[i] + Mc14[i] + Mc15[i] + Mc16[i] + Mc17[i] + Mc18[i] + Mc19[i] + Mc20[i] + Mc21[i] + Mc22[i] + Mc23[i] + Mc24[i] + Mc25[i] + Mc26[i] + Mc27[i] + Mc28[i] + Mc29[i] + Mc30[i] + Mc31[i] + Mc32[i] + Mc33[i] + Mc34[i] + Mc35[i] + Mc36[i] + Mc37[i] + Mc38[i] + Mc39[i] + Mc40[i] + Mc41[i] + Mc42[i] + Mc43[i] + Mc44[i] + Mc45[i] + Mc46[i] + Mc47[i] + Mc48[i] + Mc49[i] + Mc50[i] + Mc51[i] + Mc52[i] + Mc53[i] + Mc54[i] + Mc55[i] + Mc1c[i],i=1..nops(Mc1c))];

Mc1:=[seq(Mc2[i] + Mc3[i] + Mc4[i] + Mc5[i] + Mc6[i] + Mc7[i] + Mc8[i] + Mc9[i] + Mc10[i] + Mc11[i] + Mc12[i] + Mc13[i] + Mc14[i] + Mc15[i] + Mc16[i] + Mc17[i] + Mc18[i] + Mc19[i] + Mc20[i] + Mc21[i] + Mc22[i] + Mc23[i] + Mc26[i] + Mc27[i] + Mc28[i] + Mc29[i] + Mc30[i] + Mc31[i] + Mc32[i] + Mc33[i] + Mc34[i] + Mc35[i] + Mc36[i] + Mc37[i] + Mc38[i] + Mc39[i] + Mc42[i] + Mc43[i] + Mc44[i] + Mc45[i] + Mc46[i] + Mc47[i] + Mc48[i] + Mc49[i] + Mc50[i] + Mc51[i] + Mc52[i] + Mc53[i] + Mc54[i] + Mc55[i] + Mc1c[i],i=1..nops(Mc1c))];

Eqns||m:=ListTools:-Flatten([Kc1,Lc1,Mc1]);
Mat||m:=evalDG(LinearAlgebra:-GenerateMatrix(Eqns||m,Comps2)*Bf[m]);

od;

BigMat:=add(Mat||i,i=1..dimbase);
#Connection(BigMat);
Connection(convert(BigMat,DGtensor,[["con_vrt","cov_vrt"],[]]));

end:
